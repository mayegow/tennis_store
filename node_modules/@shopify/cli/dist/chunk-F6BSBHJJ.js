import {
  joinPath
} from "./chunk-T2GATXSP.js";
import {
  init_cjs_shims
} from "./chunk-POZ5MGPT.js";

// ../cli-kit/dist/private/node/constants.js
init_cjs_shims();

// ../../node_modules/.pnpm/env-paths@3.0.0/node_modules/env-paths/index.js
init_cjs_shims();
import path from "node:path";
import os from "node:os";
import process2 from "node:process";
var homedir = os.homedir(), tmpdir = os.tmpdir(), { env } = process2, macos = (name) => {
  let library = path.join(homedir, "Library");
  return {
    data: path.join(library, "Application Support", name),
    config: path.join(library, "Preferences", name),
    cache: path.join(library, "Caches", name),
    log: path.join(library, "Logs", name),
    temp: path.join(tmpdir, name)
  };
}, windows = (name) => {
  let appData = env.APPDATA || path.join(homedir, "AppData", "Roaming"), localAppData = env.LOCALAPPDATA || path.join(homedir, "AppData", "Local");
  return {
    // Data/config/cache/log are invented by me as Windows isn't opinionated about this
    data: path.join(localAppData, name, "Data"),
    config: path.join(appData, name, "Config"),
    cache: path.join(localAppData, name, "Cache"),
    log: path.join(localAppData, name, "Log"),
    temp: path.join(tmpdir, name)
  };
}, linux = (name) => {
  let username = path.basename(homedir);
  return {
    data: path.join(env.XDG_DATA_HOME || path.join(homedir, ".local", "share"), name),
    config: path.join(env.XDG_CONFIG_HOME || path.join(homedir, ".config"), name),
    cache: path.join(env.XDG_CACHE_HOME || path.join(homedir, ".cache"), name),
    // https://wiki.debian.org/XDGBaseDirectorySpecification#state
    log: path.join(env.XDG_STATE_HOME || path.join(homedir, ".local", "state"), name),
    temp: path.join(tmpdir, username, name)
  };
};
function envPaths(name, { suffix = "nodejs" } = {}) {
  if (typeof name != "string")
    throw new TypeError(`Expected a string, got ${typeof name}`);
  return suffix && (name += `-${suffix}`), process2.platform === "darwin" ? macos(name) : process2.platform === "win32" ? windows(name) : linux(name);
}

// ../cli-kit/dist/private/node/constants.js
var identifier = "shopify-cli", cacheFolder = () => process.env.XDG_CACHE_HOME ? process.env.XDG_CACHE_HOME : envPaths(identifier).cache, logsFolder = () => envPaths(identifier).log, environmentVariables = {
  alwaysLogAnalytics: "SHOPIFY_CLI_ALWAYS_LOG_ANALYTICS",
  alwaysLogMetrics: "SHOPIFY_CLI_ALWAYS_LOG_METRICS",
  deviceAuth: "SHOPIFY_CLI_DEVICE_AUTH",
  accessCodeAuth: "SHOPIFY_CLI_ACCESS_CODE_AUTH",
  enableCliRedirect: "SHOPIFY_CLI_ENABLE_CLI_REDIRECT",
  env: "SHOPIFY_CLI_ENV",
  firstPartyDev: "SHOPIFY_CLI_1P_DEV",
  noAnalytics: "SHOPIFY_CLI_NO_ANALYTICS",
  partnersToken: "SHOPIFY_CLI_PARTNERS_TOKEN",
  runAsUser: "SHOPIFY_RUN_AS_USER",
  serviceEnv: "SHOPIFY_SERVICE_ENV",
  skipCliRedirect: "SHOPIFY_CLI_SKIP_CLI_REDIRECT",
  spinInstance: "SPIN_INSTANCE",
  themeToken: "SHOPIFY_CLI_THEME_TOKEN",
  unitTest: "SHOPIFY_UNIT_TEST",
  verbose: "SHOPIFY_FLAG_VERBOSE",
  noThemeBundling: "SHOPIFY_CLI_NO_THEME_BUNDLING",
  bundledThemeCLI: "SHOPIFY_CLI_BUNDLED_THEME_CLI",
  // Variables to detect if the CLI is running in a cloud environment
  codespaces: "CODESPACES",
  codespaceName: "CODESPACE_NAME",
  codespacePortForwardingDomain: "GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN",
  gitpod: "GITPOD_WORKSPACE_URL",
  cloudShell: "CLOUD_SHELL",
  spin: "SPIN",
  spinAppPort: "SERVER_PORT",
  spinAppHost: "SPIN_APP_HOST",
  organization: "SHOPIFY_CLI_ORGANIZATION",
  identityToken: "SHOPIFY_CLI_IDENTITY_TOKEN",
  refreshToken: "SHOPIFY_CLI_REFRESH_TOKEN",
  otelURL: "SHOPIFY_CLI_OTEL_EXPORTER_OTLP_ENDPOINT",
  themeKitAccessDomain: "SHOPIFY_CLI_THEME_KIT_ACCESS_DOMAIN"
}, defaultThemeKitAccessDomain = "theme-kit-access.shopifyapps.com", systemEnvironmentVariables = {
  backendPort: "BACKEND_PORT"
}, pathConstants = {
  executables: {
    dev: "/opt/dev/bin/dev"
  },
  directories: {
    cache: {
      path: () => cacheFolder(),
      vendor: {
        path: () => joinPath(cacheFolder(), "vendor"),
        binaries: () => joinPath(cacheFolder(), "vendor", "binaries")
      }
    }
  }
}, sessionConstants = {
  expirationTimeMarginInMinutes: 4
}, bugsnagApiKey = "9e1e6889176fd0c795d5c659225e0fae";

export {
  envPaths,
  logsFolder,
  environmentVariables,
  defaultThemeKitAccessDomain,
  systemEnvironmentVariables,
  pathConstants,
  sessionConstants,
  bugsnagApiKey
};
//# sourceMappingURL=chunk-F6BSBHJJ.js.map
